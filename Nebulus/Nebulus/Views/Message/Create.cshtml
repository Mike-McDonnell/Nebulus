@model Nebulus.Models.MessageItem
@using DayPilot.Web.Mvc
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="@Url.Content("~/Content/display-monitor.css")" rel="stylesheet" type="text/css" />

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.MessageItemId, null)
    
    @*<div class="form-horizontal">*@
        <div id="Wrapper">
            <form action="">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div id="MessageWrapper">
                    <fieldset>
                        <legend>MESSAGE</legend>
                        <div class="FloatDivLeft">
                            <p>
                                <label for="MessageTitle">Message Title:</label>
                                @Html.EditorFor(model => model.MessageTitle, null)
                                @Html.ValidationMessageFor(model => model.MessageTitle)
                            </p>
                        </div>

                        <div class="FloatDivLeft">
                            <p>
                                <label for="MessagePriority">Message Priority:</label>
                                @Html.EnumDropDownListFor(model => model.MessagePriority)
                                @Html.ValidationMessageFor(model => model.MessagePriority, "", new { @class = "text-danger" })
                            </p>
                        </div>

                        <div class="FloatDivRight">
                            <p>
                                <label for="MessageType">Message Type:</label>
                                @Html.EnumDropDownListFor(model => model.MessageType)
                                @Html.ValidationMessageFor(model => model.MessageType, "", new { @class = "text-danger" })
                            </p>
                        </div>

                        <div class="ClearBoth">
                            <p>
                                <label for="MessageBody">Message:</label><br />
                                @Html.TextAreaFor(Model => Model.MessageBody, new { @class = "ckeditor" })
                                @*@Html.ValidationMessageFor(model => model.MessageBody, "", new { @class = "text-danger" })*@
                            </p>
                        </div>

                        <div class="ClearBoth">
                            <p>
                                <div class="display-container">
                                    <div class="screen monitor">
                                        <div class="content">
                                            <div id="display-monitor" class="pg-marquee">
                                                <ul id="display-monitor-content">
                                                    <li></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </p>
                        </div>

                    </fieldset>
                </div><!--end of MessageWrapper-->

                <div id="AdvancedWrapper">
                    <fieldset>
                        <legend>ADVANCED</legend>
                        <fieldset class="odd">
                            <div class="ClearBoth">
                                <div class="FloatDivLeft">
                                    <p>
                                        <label for="ScheduleStart">Schedule:</label><br>
                                        @Html.EditorFor(model => model.ScheduleStart)
                                        @Html.ValidationMessageFor(model => model.ScheduleStart, "", new { @class = "text-danger" })
                                    </p>
                                </div>

                                <div class="FloatDivRight">
                                    <fieldset>
                                        <legend>Repeat:</legend>
                                        @Html.EnumDropDownListFor(model => model.ScheduleInterval)
                                    </fieldset>
                                </div>
                            </div>
                        </fieldset>
                        <fieldset>
                            <div class="ClearBoth">
                                <div id="FirstHortDiv" class="FloatDivLeft">
                                    <p>Screen Location/Coordinates:</p>
                                    @Html.EnumDropDownListFor(model => model.MessageLocation)
                                    @Html.ValidationMessageFor(model => model.MessageLocation, "", new { @class = "text-danger" })
                                </div>

                                <div class="FloatDivLeft">
                                    <p>Expiration:</p>
                                    @Html.EditorFor(model => model.Expiration)
                                    @Html.ValidationMessageFor(model => model.Expiration, "", new { @class = "text-danger" })
                                </div>

                                <div class="FloatDivRight">
                                    <p>Duration:</p>
                                    @Html.EditorFor(model => model.duration)
                                    @Html.ValidationMessageFor(model => model.duration, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </fieldset>
                        <fieldset class="odd">
                            <div id="Tags" class="ClearBoth">
                                @if(AppConfiguration.Settings.GroupTAGsEnabled)
                                { 
                                <div class="FloatDivLeft">
                                    <p>
                                        <label for="">AD	Group:</label>
                                        <input id="ADGroupSearch" type="text" name="" />
                                    </p>
                                </div>
                                }
                                @if(AppConfiguration.Settings.UserTAGsEnabled)
                                {
                                <div class="FloatDivRight">
                                    <p>
                                        <label for="">Username:</label>
                                        <input id="userNameSearch" type="text" name="">
                                    </p>
                                </div>
                                }
                                @if(AppConfiguration.Settings.ComputerTAGsEnabled)
                                {
                                <div class="FloatDivRight">
                                    <p>
                                        <label for="">Computer Name:</label>
                                        <input id="computerSearch" type="text" name="">
                                    </p>
                                </div>
                                }
                                @if(AppConfiguration.Settings.SubNetTAGsEnabled)
                                {
                                <div class="ClearBoth FloatDivLeft" style="margin-left:23px">
                                    <p>
                                        <label for="">Subnet:</label>
                                        <input id="subNetSearch" type="text" name="">
                                    </p>
                                </div>
                                }
                                @Html.ListBox("tags", new MultiSelectList(new List<string>()), new { @data_role="tagsinput"})    
                            </div>
                        </fieldset>
                    </fieldset>
                </div><!--end of AdvancedWrapper-->
                <button type="button" value="">Cancel</button>
                <button type="submit" >Transmit</button>

            </form>
        </div><!--end of wrapper-->

     @*</div>*@
}

<script type="text/javascript">

    CKEDITOR.on('instanceReady', function (ev) { ev.editor.on('change', function () { $("#display-monitor-content li").replaceWith('<li>' + ev.editor.getData() + '</li>'); }) });
    $("#MessageType").change(
        function()
        {
            if (CKEDITOR.instances.MessageBody) { CKEDITOR.instances.MessageBody.destroy(true); }
            if($(this).val() == 0)
            {
                $("#display-monitor").removeClass().addClass('pg-marquee');
                CKEDITOR.config.extraPlugins = 'font';
                CKEDITOR.on('instanceReady', function(ev) { ev.editor.setData('<span style="font-size:72px;">&shy;</span>')})
               
                CKEDITOR.config.height = 100;
            }
            if($(this).val() == 1)
            {
                $("#display-monitor").removeClass().addClass('pg-top');
                CKEDITOR.config.extraPlugins = 'font';
                CKEDITOR.config.height = 300;
            }

            CKEDITOR.replace('MessageBody', CKEDITOR.config);
        });

    var roxyFileman = '/fileman/index.html';
    $(function () {
        CKEDITOR.replace('MessageBody', {
            filebrowserBrowseUrl: roxyFileman,
            filebrowserImageBrowseUrl: roxyFileman + '?type=image',
            removeDialogTabs: 'link:upload;image:upload'
        });
    });
</script>

@if (AppConfiguration.Settings.GroupTAGsEnabled)
{
    <script type="text/javascript">
        $("#ADGroupSearch").autocomplete({
            source: function (request, response) {
                jQuery.get("/Tag/GetADGroups", {
                    term: request.term
                }, function (data) {
                    response(data);
                });
            },
            minLength: 3,
            delay: 500,
            autoFocus: true
        }).keyup(function (event) {
            if (event.which == 13) {
                $("#tags").tagsinput('add', $(this).val());
            }
        }).keydown(function (event) {
            if (event.which == 13) {
                event.preventDefault();
            }
        });
    </script>
}

@if (AppConfiguration.Settings.UserTAGsEnabled)
{
    <script type="text/javascript">
        $("#userNameSearch").autocomplete({
            source: function (request, response) {
                jQuery.get("/Tag/GetADUsers", {
                    term: request.term
                }, function (data) {
                    response(data);
                });
            },
            minLength: 3,
            delay: 500,
            autoFocus: true
        }).keyup(function (event) {
            if (event.which == 13) {
                $("#tags").tagsinput('add', $(this).val());
            }
        }).keydown(function (event) {
            if (event.which == 13) {
                event.preventDefault();
            }
        });
    </script>
}

@if (AppConfiguration.Settings.ComputerTAGsEnabled)
{
    <script type="text/javascript">
        $("#computerSearch").autocomplete({
            source: function (request, response) {
                jQuery.get("/Tag/GetADComputers", {
                    term: request.term
                }, function (data) {
                    response(data);
                });
            },
            minLength: 3,
            delay: 500,
            autoFocus: true
        }).keyup(function (event) {
            if (event.which == 13) {
                $("#tags").tagsinput('add', $(this).val());
            }
        }).keydown(function (event) {
            if (event.which == 13) {
                event.preventDefault();
            }
        });
    </script>
}

@if (AppConfiguration.Settings.SubNetTAGsEnabled)
{
    <script type="text/javascript">
        $("#subNetSearch").autocomplete({
            source: function (request, response) {
                jQuery.get("/Tag/GetSubNetList", {
                    term: request.term
                }, function (data) {
                    response(data);
                });
            },
            minLength: 3,
            ddelay: 500,
            autoFocus: true
        }).keyup(function (event) {
            if (event.which == 13) {
                $("#tags").tagsinput('add', $(this).val());
            }
        }).keydown(function (event) {
            if (event.which == 13) {
                event.preventDefault();
            }
        });
    </script>
}

<script type="text/javascript">
    $("#ScheduleStart").datetimepicker({ inline: true, minDate: 'yesterday' });
    $("#Expiration").datetimepicker({ inline: true, minDate: 'tommorow' });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

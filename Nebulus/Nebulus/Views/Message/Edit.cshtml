@model Nebulus.Models.MessageItem

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="@Url.Content("~/Content/display-monitor.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/message-layout.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/ckeditor/ckeditor.js")" type="text/javascript"> </script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.MessageItemId, null)
    @Html.HiddenFor(model => model.Status, null)
    @Html.HiddenFor(model => model.Creator, null)

    <div id="Wrapper">
        @*<form action="">*@
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div id="MessageWrapper">
                <fieldset>
                    <legend>Edit MESSAGE </legend>

                    <fieldset>
                        <div class="form-group">
                            <label for="MessageTitle">Message Title:</label>
                            @Html.EditorFor(model => model.MessageTitle, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MessageTitle)
                        </div>

                        <div class="form-group">
                            <label for="MessageType">Message Type:</label>
                            @Html.EnumDropDownListFor(model => model.MessageType, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.MessageType, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">

                            <label for="MessageLocation">Message Location:</label>
                            @Html.EnumDropDownListFor(model => model.MessageLocation, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.MessageLocation, "", new { @class = "text-danger" })

                            @Html.HiddenFor(model => model.MessageHeight)
                            @Html.HiddenFor(model => model.MessageWidth)
                            @Html.HiddenFor(model => model.MessageTop)
                            @Html.HiddenFor(model => model.MessageLeft)
                        </div>

                        <div class="form-group">
                            <label for="MessagePriority">Message Priority:</label>
                            @Html.EnumDropDownListFor(model => model.MessagePriority, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.MessagePriority, "", new { @class = "text-danger" })
                        </div>

                    </fieldset>

                    <div class="form-group">
                        @Html.TextAreaFor(model => model.MessageBody, new { @class = "ckeditor" })
                        @Html.ValidationMessageFor(model => model.MessageBody, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <div class="display-container">
                            <div class="screen monitor">
                                <div class="content">
                                    <div id="display-monitor" class="pg-marquee">
                                        <ul id="display-monitor-content" class="marquee-outer">
                                            <li></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="AdvancedArrow"><h4>...</h4></div>
                </fieldset>

            </div><!--end of MessageWrapper-->

            <div id="AdvancedWrapper">
                <fieldset>
                    <legend>ADVANCED</legend>
                    <fieldset class="odd">
                        <div class="ClearBoth">
                            <div class="FloatDivLeft">
                                <p>
                                    <label for="ScheduleStart">Schedule:</label><br>
                                    @Html.TextBoxFor(model => model.ScheduleStart, new { @Value = Model.ScheduleStart.ToString("yyyy/MM/dd HH:mm") })
                                    @Html.ValidationMessageFor(model => model.ScheduleStart, "", new { @class = "text-danger" })
                                </p>
                            </div>

                            <div class="FloatDivRight">
                                <fieldset>
                                    <legend>Repeat:</legend>
                                    @Html.EnumDropDownListFor(model => model.ScheduleInterval, new { @class = "form-control" })
                                </fieldset>
                            </div>
                        </div>
                    </fieldset>
                    <fieldset>
                        <div class="ClearBoth">
                            <div class="FloatDivLeft">
                                <label for="Expiration">Expiration:</label><br>
                                @Html.EditorFor(model => model.Expiration, new { htmlAttributes = new { @class = "form-control" }, @Value = Model.Expiration.ToString("yyyy/MM/dd HH:mm") })
                                @Html.ValidationMessageFor(model => model.Expiration, "", new { @class = "text-danger" })
                            </div>
                            <div class="FloatDivRight">
                                <label for="duration">Duration:</label>
                                @Html.EditorFor(model => model.duration, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.duration, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </fieldset>
                    <fieldset class="odd">
                        <div id="Tags">
                            @if (AppConfiguration.Settings.GroupTAGsEnabled)
                            {
                                <div class="form-group">
                                    <label for="ADGroupSearch">Active Directory Groups:</label>
                                    <input id="ADGroupSearch" type="text" class="form-control" />
                                </div>
                            }
                            @if (AppConfiguration.Settings.UserTAGsEnabled)
                            {
                                <div class="form-group">
                                    <label for="userNameSearch">Username:</label>
                                    <input id="userNameSearch" type="text" class="form-control">
                                </div>
                            }
                            @if (AppConfiguration.Settings.ComputerTAGsEnabled)
                            {
                                <div class="form-group">
                                    <label for="computerSearch">Computer Name:</label>
                                    <input id="computerSearch" type="text" class="form-control">
                                </div>
                            }
                            @if (AppConfiguration.Settings.SubNetTAGsEnabled)
                            {
                                <div class="form-group">
                                    <label for="subNetSearch">Subnet:</label>
                                    <input id="subNetSearch" type="text" class="form-control">
                                </div>
                            }
                        </div>
                        @Html.HiddenFor(model => model.TargetGroup)
                        <label for="tags">General Tags</label>
                        <div id="tags-input" class="ClearBoth">
                            @Html.ListBox("tags", new MultiSelectList(new List<string>()), new { @data_role = "tagsinput" })
                        </div>

                        @Html.HiddenFor(model => model.ADGroupTags)
                        <label for="tagsAD-input">Group Tags</label>
                        <div id="tagsAD-input" class="ClearBoth">
                            @Html.ListBox("tagsAD", new MultiSelectList(new List<string>()), new { @data_role = "tagsinput" })
                        </div>
                    </fieldset>
                </fieldset>
            </div><!--end of AdvancedWrapper-->
            <a href="~/Message/Index" class="btn btn-warning btn-lg btn-block">Cancel</a>
            <button type="submit" value="Save" class="btn btn-success btn-lg btn-block">Save</button>
            @Html.ActionLink("Delete", "Delete", new { id = Model.MessageItemId }, new { @class = "btn btn-danger btn-lg btn-block" })

        @*</form>*@
    </div><!--end of wrapper-->

}
        <script type="text/javascript">

            CKEDITOR.config.extraPlugins = 'flash,font,iframe,forms,justify,colordialog,bidi,colorbutton,lineutils,youtube,wenzgmap,TextToSpeech';
            if($("#MessageType").val() == 0) 
            {
                $("#MessageLocation").attr('disabled', true);
                CKEDITOR.config.height = 100;
            }
            CKEDITOR.on('instanceReady', function (ev) {
                ev.editor.on('change', function () {
                    if ($("#MessageType").val() == 0) {
                        $("#display-monitor-content li").replaceWith('<li><marquee class="marquee-inner" direction="left" scrollamount="10" behavior="scroll">' + ev.editor.getData() + '</marquee></li>');
                    }
                    else {
                        $("#display-monitor-content li").replaceWith('<li>' + ev.editor.getData() + '</li>');
                    }
                })
            });
            CKEDITOR.on('instanceReady', function (ev) {
                if ($("#MessageType").val() == 0) {
                    $("#display-monitor-content li").replaceWith('<li><marquee class="marquee-inner" direction="left" scrollamount="10" behavior="scroll">' + ev.editor.getData() + '</marquee></li>');
                }
                else {
                    $("#display-monitor-content li").replaceWith('<li>' + ev.editor.getData() + '</li>');
                }
            })
            $("#MessageType").change(
                function () {
                    if (CKEDITOR.instances.MessageBody) { CKEDITOR.instances.MessageBody.destroy(true); }
                    if ($(this).val() == 0) {
                        $("#display-monitor").removeClass().removeAttr('style').addClass('pg-marquee');
                        $("#MessageLocation").attr('disabled', true);
                        CKEDITOR.config.height = 100;
                    }
                    if ($(this).val() == 1) {
                        $("#MessageLocation").trigger("change");
                        CKEDITOR.config.height = 300;
                        $("#MessageLocation").removeAttr('disabled');
                    }

                    CKEDITOR.replace('MessageBody', CKEDITOR.config);
                });

            $("#MessageLocation").change(
               function () {
                   $("#display-monitor").draggable({ disabled: true, drag: function (event, ui) { setPostionValue(ui); } }).resizable({ disabled: true, resize: function (event, ui) { setSizeValue(ui); } });

                   if ($(this).val() == 0) {
                       $("#display-monitor").removeClass().removeAttr('style').addClass('pg-center');
                   }
                   if ($(this).val() == 1) {
                       $("#display-monitor").removeClass().removeAttr('style').addClass('pg-bottom');
                   }
                   if ($(this).val() == 2) {
                       $("#display-monitor").removeClass().removeAttr('style').addClass('pg-top');
                   }
                   if ($(this).val() == 3) {
                       $("#display-monitor").removeClass().removeAttr('style').addClass('pg-right');
                   }
                   if ($(this).val() == 4) {
                       $("#display-monitor").removeClass().removeAttr('style').addClass('pg-left');
                   }
                   if ($(this).val() == 5) {
                       $("#display-monitor").removeClass().removeAttr('style').addClass('pg-fullscreen');
                   }
                   if ($(this).val() == 6) {
                       $("#display-monitor").draggable("enable").resizable("enable");
                   }
               });
            function setPostionValue(ui) {
                $("#MessageTop").val(parseInt(ui.position.top)); $("#MessageLeft").val(parseInt(ui.position.left));
            }
            function setSizeValue(ui) {
                $("#MessageHeight").val(parseInt(ui.size.height)); $("#MessageWidth").val(parseInt(ui.size.width));
            }

            $("#AdvancedWrapper").hide();
            $("#AdvancedArrow").click(function () { $("#AdvancedArrow").hide(); $("#AdvancedWrapper").slideDown(); })

        </script>

<script type="text/javascript">
    $(document).ready( function() { $("#TargetGroup").val().split('|').forEach(function (i) {
        if (i != "") {
            $("#tags").append($('<option>', {
                value: i,
            }));
        }
    })
        $("#MessageType").trigger("change");
        if($("#MessageLocation").val() == 6)
        {
            $("#display-monitor").removeClass().addClass('pg-center').css({ 'top': $("#MessageTop").val() + "px", 'left': $("#MessageLeft").val() + "px", 'width': $("#MessageWidth").val(), 'height': $("#MessageHeight").val()});
        }
    });

    $(document).ready(function () {
        $("#ADGroupTags").val().split('|').forEach(function (i) {
            $("#tagsAD").append($('<option>', {
                value: i,
            }));
    })});

</script>

        @if (AppConfiguration.Settings.GroupTAGsEnabled)
{
            <script type="text/javascript">
                $("#ADGroupSearch").autocomplete({
                    source: function (request, response) {
                        jQuery.get("/Tag/GetADGroups", {
                            term: request.term
                        }, function (data) {
                            response(data);
                        });
                    },
                    minLength: 3,
                    delay: 500,
                    autoFocus: true
                }).keyup(function (event) {
                    if (event.which == 13) {
                        $("#tagsAD").tagsinput('add', $(this).val());
                    }
                }).keydown(function (event) {
                    if (event.which == 13) {
                        event.preventDefault();
                    }
                });
            </script>
}

        @if (AppConfiguration.Settings.UserTAGsEnabled)
{
            <script type="text/javascript">
                $("#userNameSearch").autocomplete({
                    source: function (request, response) {
                        jQuery.get("/Tag/GetADUsers", {
                            term: request.term
                        }, function (data) {
                            response(data);
                        });
                    },
                    minLength: 3,
                    delay: 500,
                    autoFocus: true
                }).keyup(function (event) {
                    if (event.which == 13) {
                        $("#tags").tagsinput('add', $(this).val());
                    }
                }).keydown(function (event) {
                    if (event.which == 13) {
                        event.preventDefault();
                    }
                });
            </script>
}

        @if (AppConfiguration.Settings.ComputerTAGsEnabled)
{
            <script type="text/javascript">
                $("#computerSearch").autocomplete({
                    source: function (request, response) {
                        jQuery.get("/Tag/GetADComputers", {
                            term: request.term
                        }, function (data) {
                            response(data);
                        });
                    },
                    minLength: 3,
                    delay: 500,
                    autoFocus: true
                }).keyup(function (event) {
                    if (event.which == 13) {
                        $("#tags").tagsinput('add', $(this).val());
                    }
                }).keydown(function (event) {
                    if (event.which == 13) {
                        event.preventDefault();
                    }
                });
            </script>
}

        @if (AppConfiguration.Settings.SubNetTAGsEnabled)
{
            <script type="text/javascript">
                $("#subNetSearch").autocomplete({
                    source: function (request, response) {
                        jQuery.get("/Tag/GetSubNetList", {
                            term: request.term
                        }, function (data) {
                            response(data);
                        });
                    },
                    minLength: 3,
                    ddelay: 500,
                    autoFocus: true
                }).keyup(function (event) {
                    if (event.which == 13) {
                        $("#tags").tagsinput('add', $(this).val());
                    }
                }).keydown(function (event) {
                    if (event.which == 13) {
                        event.preventDefault();
                    }
                });
            </script>
}

        <script type="text/javascript">
            $("#ScheduleStart").datetimepicker({ inline: true, minDate: 'yesterday' });
            //$("#Expiration").datetimepicker();
            $("#Expiration").datetimepicker({ inline: true, minDate: 'tommorow' });
        </script>

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
        }
